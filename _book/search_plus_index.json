{"./":{"url":"./","title":"介绍","keywords":"","body":"目录 介绍 JAVASCRIPT常见函数 工具 日期 DOM操作 EVENT事件 正则表达式 算法-es6版 HTML与CSS meta详解 CSS样式 CSS3动画 CSS设置居中的方案 开发工具 Node.js安装及环境配置之Windows篇 开发者工具 markdown语法 版本记录 © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:53 "},"docs/chapter1/":{"url":"docs/chapter1/","title":"JAVASCRIPT常见函数","keywords":"","body":"JAVASCRIPT 此部分主要是javascript相关的代码，包括一些常用的工具函数，dom操作等 © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:54 "},"docs/chapter1/工具.html":{"url":"docs/chapter1/工具.html","title":"工具","keywords":"","body":"工具 禁用按钮倒计时 /** * 禁用按钮倒计时 * @param {Object} element - DOM对象,按钮 * @param {Number} time - 倒计时时间，默认60秒 * @param {String} msg - 倒计时提示语 */ function showTimer(element, time, msg) { if (!arguments[1]) { time = 60; } if (!arguments[1]) { msg = \"重新发送\"; } var countdown = time; var eText = element.innerHTML; function timer() { if (countdown === 0) { element.removeAttribute(\"disabled\"); element.innerHTML = eText; countdown = time; return; } else { element.setAttribute(\"disabled\", true); element.innerHTML = msg + \"(\" + countdown + \")\"; countdown--; } setTimeout(function () { timer(); }, 1000); } timer(); } 判断是否为空 /** * 判断字符串是否为空 * @param {String} str - 字符串 * @returns {Boolean} */ function isNull (str) { if (str == null || str == '' || typeof(str) == \"undefined\") { return true; } else { return false; } } json格式转树状结构 /** * json格式转树状结构(最大支持三级) * @param {Object} json数据 * @param {String} id的字符串 * @param {String} 父id的字符串 * @param {Object} children的字符串 * @return {Array} 数组 */ function transData(a, idStr, pidStr, chindrenStr) { var r = [], tr = [], hash = {}, id = idStr, pid = pidStr, children = chindrenStr; for (var i in a) { hash[a[i][id]] = a[i]; } for (var j in a) { var aVal = a[j], hashVP = hash[aVal[pid]]; if (hashVP) { !hashVP[children] && (hashVP[children] = []); hashVP[children].push(aVal); } else { tr.push(aVal); } } for (var k in tr) { tr[k][\"level\"] = 1; r.push(tr[k]); for (var m in tr[k][children]) { tr[k][children][m][\"level\"] = 2; r.push(tr[k][children][m]); for (var n in tr[k][children][m][children]) { tr[k][children][m][children][n][\"level\"] = 3; r.push(tr[k][children][m][children][n]); for (var i in tr[k][children][m][children][n][children]) { tr[k][children][m][children][n][children][i][\"level\"] = 4; r.push(tr[k][children][m][children][n][children][i]); } } } } return { treeDatas: tr, treeList: r }; } 获取地址栏参数 /** * 获取地址栏参数 * @param {String} name - 参数名 * @returns {String} 参数值 */ function getQueryString(name) { var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\"); var r = window.location.search.substr(1).match(reg); if (r != null) return decodeURI(r[2]); return null; } 获取运行环境 /** * 获取运行环境 * @returns */ var browserUtil = { versions: function () { var u = navigator.userAgent, app = navigator.appVersion; return { mobile: !!u.match(/AppleWebKit.*Mobile.*/), // 是否为移动终端 ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), // ios终端 android: u.indexOf('Android') > -1 || u.indexOf('Adr') > -1 // android终端 }; }(), isWeiXin: function () { var ua = navigator.userAgent.toLowerCase(); if (ua.match(/MicroMessenger/i) == \"micromessenger\") { // 在微信中打开 return true; } else { return false; } }(), isQQ: function () { var ua = navigator.userAgent.toLowerCase(); if (ua.match(/QQ/i) == \"qq\") { // 在QQ空间打开 return true; } else { return false; } }(), isWeiBo: function () { var ua = navigator.userAgent.toLowerCase(); if (ua.match(/WeiBo/i) == \"weibo\") { // 在新浪微博客户端打开 return true; } else { return false; } }(), language: (navigator.browserLanguage || navigator.language).toLowerCase() } token生成 /** * token生成 * @param {Number} len - token长度 * @returns {String} token */ function randomString (len) { len = len || 16; var $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'; /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/ var maxPos = $chars.length; var pwd = ''; for (i = 0; i 手机号隐藏中间几位号码 /** * 手机号码隐藏中间四位 * @param {Number} phone - 手机号 * @returns {String} 处理后的手机号码 */ function formatPhone(phone){ if(phone) { var regPhone= /(\\d{4})\\d{4}(\\d{3})/; var phone= phone.replace(regPhone,\"$1****$2\"); return phone; }else { return null; } } 文字滚动 /** * @desc 文字滚动效果 * @param {Number} lineHieght - 文字一次向上滚动的距离或高度； * @param {Number} speed - 滚动速度； * @param {Number} delay - 滚动停顿的时间间隔； * @param {Number} elementTop - 文字内容顶端与滚动区域顶端的距离，初始值为0； * @param {Object} element - 文档对象； * startmarquee(25, 30, 3000, 0, 0, element);//带停顿效果 * startmarquee(25, 40, 0, 0, 0, element);//不间断连续 */ function startMarquee(lineHieght, speed, delay, elementTop, element) { //传递参数 var hander, flag = false; element.innerHTML += element.innerHTML; //对象中的实际内容被复制了一份，包含了两个ul，当然li标签也由原来的3行，变为6行；复制的目的在于给文字不间断向上滚动提供过渡。 element.onmouseover = function () { flag = true; } //鼠标滑过，停止滚动； element.onmouseout = function () { flag = false; } //鼠标离开，开始滚动；flag是true还是false直接影响到下面start()函数的执行； element.scrollTop = elementTop; //文字内容顶端与滚动区域顶端的距离，初始值为0； function start() { hander = setInterval(scrolling, speed); //每隔一段时间，setInterval便会执行一次scrolling函数；speed越大，滚动时间间隔越大，滚动速度越慢； if (!flag) { element.scrollTop += 1; } //滚动停止或开始，取决于flag传来的布尔值； } function scrolling() { if (element.scrollTop % lineHieght != 0) { //如果不被整除，即一次上移的高度达不到lineHieght，则内容会继续往上滚动； element.scrollTop += 1; if (element.scrollTop >= element.scrollHeight / 2) element.scrollTop = 0; //对象o中的内容之前被复制了一次，所以它的滚动高度，其实是原来内容的两倍高度；当内容向上滚动到scrollHeight / 2的高度时，全部3行文字已经显示了一遍，至此整块内容scrollTop归0；再等待下一轮的滚动，从而达到文字不间断向上滚动的效果； } else { clearInterval(hander); //否则清除hander，暂停滚动 setTimeout(start, delay); //经过delay间隔后，启动start()再连续滚动 } } setTimeout(start, delay); //第一次启动滚动；setTimeout会在一定的时间后执行函数start()，且只执行一次 } JS字符串转成小驼峰 操作字符串数组 function tranformStr1(str){ var strArr=str.split('-'); for(var i=1;i 操作字符数组 function tranformStr2(str){ var strArr=str.split(''); for(var i=1;i 利用正则表达式 function transformStr3(str){ var re=/-(\\w)/g; return str.replace(re,function ($0,$1){ return $1.toUpperCase(); }); } 数组转字符串 /** * param {Array} arr * param {String} sp */ function arrToStr(arr,sp){ return arr.jion(sp); } © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-08-22 10:50:07 "},"docs/chapter1/日期.html":{"url":"docs/chapter1/日期.html","title":"日期","keywords":"","body":"日期 yyyy-MM-dd HH-mm-ss转换成yyyy-MM-dd /** * yyyy-MM-dd HH-mm-ss转换成yyyy-MM-dd * @param {String} date - yyyy-MM-dd HH-mm-ss * @returns {String} - yyyy-MM-dd */ function formatDate(date){ if (date) { var date = new Date(date.replace(/-/g, '/')); var myYear = date.getFullYear(); var myMonth = date.getMonth() + 1; var myDate = date.getDate(); myMonth = myMonth 日期格式转换为时间戳 /** * 日期格式转换为时间戳 * @param {String} date - 日期 yyyy-MM-dd HH-mm-ss * @returns {Number} - 时间戳 */ function dateToUnix(date){ if (date) { var date = date.replace(/-/g, '/'); // 将yyy-mm-dd格式装换成yyyy/mm/dd return Date.parse(new Date(date)) / 1000; // parseDate.parse()支持yyyy/mm/dd格式的毫秒数返回 } else{ return null; } } 时间戳转换为日期格式 /** * 时间戳转换为日期格式 * @param {String} unix - 时间戳 * @param {Boolean} needhms - 是否需要HH-mm-ss * @returns {Number} 时间戳 */ function unixToDate(unix, needhms){ if (arguments[1] !== false && !arguments[1]) { needhms = true; } var date = new Date(parseInt(unix) * 1000); var myYear = date.getFullYear(); var myMonth = date.getMonth() + 1; var myDate = date.getDate(); var myHour = date.getHours(); var myMinute = date.getMinutes(); var mySecond = date.getSeconds(); myMonth = myMonth 时间戳拆分 /** * 时间戳拆分 * @param unix - 时间戳 * @returns {Object} year: number, month: number, date: number, hour: number, minute: number, second: number */ function apartDatetime(unix) { var now = new Date(parseInt(unix) * 1000); var year = now.getFullYear(); var month = now.getMonth() + 1; var date = now.getDate(); var hour = now.getHours(); var minute = now.getMinutes(); var second = now.getSeconds(); return { year: year, month: month, date: date, hour: hour, minute: minute, second: second } } © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:54 "},"docs/chapter1/DOM操作.html":{"url":"docs/chapter1/DOM操作.html","title":"DOM操作","keywords":"","body":"DOM操作 是否有class /** * @desc 是否有class * @param {Object} obj * @param {String} cls * @returns {Boolean} */ function hasClass(obj, cls) { cls = cls.replace(/^\\s|\\s$/g, \"\") return (\" \" + ((obj || {}).className || \"\").replace(/\\s/g, \" \") + \" \").indexOf(\" \" + cls + \" \") >= 0; } 添加class /** * @desc 添加class * @param {Object} obj * @param {String} cls */ function addClass(obj, cls) { if (!this.hasClass(obj, cls)) obj.className += \" \" + cls; } 删除class /** * @desc 删除class * @param {Object} obj * @param {String} cls */ function removeClass(obj, cls) { cls = cls.replace(/^\\s|\\s$/g, \"\"); if ((\" \" + ((obj || {}).className || \"\").replace(/\\s/g, \" \") + \" \").indexOf(\" \" + cls + \" \") >= 0) { var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'); obj.className = obj.className.replace(reg, ' '); } } 获取指定元素的子元素 /** * 获取指定元素的子元素 * @param {object} curEle * @param {string} tagName * @returns {Array} */ function children (curEle, tagName) { var nodeList = curEle.childNodes; var ary = []; if (/MSIE(6|7|8)/.test(navigator.userAgent)) { for (var i = 0; i iframe 父子iframe通信 // 调用父iframe的方法 parent.frames['searchListIframe'].methodName(); // 获取父iframe的dom $(parent.frames[\"filterFrame\"].document).contents()).find(\"selectorName\"); © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:54 "},"docs/chapter1/EVENT事件.html":{"url":"docs/chapter1/EVENT事件.html","title":"EVENT事件","keywords":"","body":"EVENT事件 阻止事件冒泡 // 阻止事件冒泡 function stopEventBubble (event) { var e = event || window.event; if (e && e.stopPropagation) { e.stopPropagation(); } else { e.cancelBubble = true; } } js实现jquery ready方法 // js实现jquery ready方法 function ready (fn) { if (document.addEventListener) { // 标准浏览器 document.addEventListener('DOMContentLoaded', function () { // 注销时间，避免反复触发 document.removeEventListener('DOMContentLoaded', arguments.callee, false); fn(); // 执行函数 }, false); } else if (document.attachEvent) { // IE浏览器 document.attachEvent('onreadystatechange', function () { if (document.readyState == 'complete') { document.detachEvent('onreadystatechange', arguments.callee); fn(); // 函数执行 } }); } } jQuery – 鼠标经过(hover)事件的延时处理 (function($){ $.fn.hoverDelay = function(options){ var defaults = { hoverDuring: 200, outDuring: 200, hoverEvent: function(){ $.noop(); }, outEvent: function(){ $.noop(); } }; var sets = $.extend(defaults,options || {}); var hoverTimer, outTimer, that = this; return $(this).each(function(){ $(this).hover(function(){ clearTimeout(outTimer); hoverTimer = setTimeout(function(){sets.hoverEvent.apply(that)}, sets.hoverDuring); },function(){ clearTimeout(hoverTimer); outTimer = setTimeout(function(){sets.outEvent.apply(that)}, sets.outDuring); }); }); } })(jQuery); 参数说明： hoverDelay方法共四个参数，表示意思如下： hoverDuring鼠标经过的延时时间 outDuring鼠标移出的延时时间 hoverEvent鼠标经过执行的方法 outEvent鼠标移出执行的方法 © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:54 "},"docs/chapter1/正则表达式.html":{"url":"docs/chapter1/正则表达式.html","title":"正则表达式","keywords":"","body":"创建 RegExp 对象的语法： 方式1：new RegExp(pattern, attributes); 方式2：/pattern/attributes 参数 说明 pattern 是一个字符串，指定了正则表达式的模式或其他正则表达式。 attributes 是一个可选的字符串，包含属性 \"g\"、\"i\" 和 \"m\"，分别用于指定全局匹配、区分大小写的匹配和多行匹配。ECMAScript 标准化之前，不支持 m 属性。如果 pattern 是正则表达式，而不是字符串，则必须省略该参数。 方括号，用于查找某个范围内的字符： 表达式 描述 [abc] 查找方括号之间的任何字符。 [\\^abc] 查找任何不在方括号之间的字符。 [0-9] 查找任何从 0 至 9 的数字。 [a-z] 查找任何从小写 a 到小写 z 的字符。 [A-Z] 查找任何从大写 A 到大写 Z 的字符。 [A-z] 查找任何从大写 A 到小写 z 的字符。 [adgk] 查找给定集合内的任何字符。 [\\^adgk] 查找给定集合外的任何字符。 元字符，是拥有特殊含义的字符： 元字符 描述 . 查找单个字符，除了换行和行结束符。 \\w 查找单词字符。 \\W 查找非单词字符。 \\d 查找数字。 \\D 查找非数字字符。 \\s 查找空白字符。 \\S 查找非空白字符。 \\b 匹配单词边界。 \\B 匹配非单词边界。 \\0 查找 NUL 字符。 \\n 查找换行符。 \\f 查找换页符。 \\r 查找回车符。 \\t 查找制表符。 \\v 查找垂直制表符。 \\xxx 查找以八进制数 xxx 规定的字符。 \\xdd 查找以十六进制数 dd 规定的字符。 \\uxxxx 查找以十六进制数 xxxx 规定的 Unicode 字符。 量词 量词 描述 n+ 匹配任何包含至少一个 n 的字符串。 n* 匹配任何包含零个或多个 n 的字符串。 n? 匹配任何包含零个或一个 n 的字符串。 n{X} 匹配包含 X 个 n 的序列的字符串。 n{X,Y} 匹配包含 X 至 Y 个 n 的序列的字符串。 n{X,} 匹配包含至少 X 个 n 的序列的字符串。 n$ 匹配任何结尾为 n 的字符串。 ^n 匹配任何开头为 n 的字符串。 ?=n 匹配任何其后紧接指定字符串 n 的字符串。 ?!n 匹配任何其后没有紧接指定字符串 n 的字符串。 RegExp 对象方法 方法 描述 compile 编译正则表达式。 exec 检索字符串中指定的值。返回找到的值，并确定其位置。 test 检索字符串中指定的值。返回 true 或 false。 支持正则表达式的 String 对象的方法 方法 描述 search 检索与正则表达式相匹配的值。 match 找到一个或多个正则表达式的匹配。 replace 替换与正则表达式匹配的子串。 split 把字符串分割为字符串数组。 常用正则表达式 社交 邮箱 var mail = /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/; var mail = /^([A-Za-z0-9_\\-\\.\\u4e00-\\u9fa5])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,8})$/; 手机号 时间截止为：2018年1月11日 移动号段：134 135 136 137 138 139 147 148 150 151 152 157 158 159 172 178 182 183 184 187 188 198联通号段：130 131 132 145 146 155 156 166 171 175 176 185 186电信号段：133 149 153 173 174 177 180 181 189 199虚拟运营商：170 var isMobile = /^(13[0-9]|14[5-9]|15[012356789]|166|17[0-8]|18[0-9]|19[8-9])[0-9]{8}$/; 固定电话 var isTel = /^(\\+\\d{2}-)?0\\d{2,3}-\\d{7,8}$/; var isTel = /(\\(\\d{3,4}\\)|\\d{3,4}-|\\s)?\\d{8}/; QQ号码 var isQQ = /^[1-9][0-9]{4,10}$/; 微信号码 微信号正则，6至20位，以字母开头，字母，数字，减号，下划线 var isWeixin = /^[a-zA-Z]([-_a-zA-Z0-9]{5,19})+$/; 字符 检测是不是纯数字 var isNum = /(^-?[0-9]\\d*$)/; 纯中文 var isCn = /^[\\u4e00-\\u9fa5]+$/; 用户名 用户名正则，4到16位（字母，数字，下划线，减号） var isUsername = /^[a-zA-Z0-9_-]{4,16}$/; 密码 密码正则，以字母开头，长度在6~18之间，只能包含字母、数字和下划线 var isPwd =/^[a-zA-Z]\\w{5,17}$/; 强密码正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符 var isPwd = /^.*(?=.{6,})(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*? ]).*$/; 特殊字符检测 var isSchar = /[\"'<>%;)(&+]+-!！@#$~/; 地理位置 域名 vra isDomain = /^(?=^.{3,255}$)[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\\\\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+$/; IP地址 var isIP = /\\d+\\.\\d+\\.\\d+\\.\\d+/; 邮政编码 var isMailCode = /[1-9]{1}(\\d+){5}/; 经纬度 经度正则 var isLong = /^(\\-|\\+)?(((\\d|[1-9]\\d|1[0-7]\\d|0{1,3})\\.\\d{0,6})|(\\d|[1-9]\\d|1[0-7]\\d|0{1,3})|180\\.0{0,6}|180)$/; 纬度正则 var isLat = /^(\\-|\\+)?([0-8]?\\d{1}\\.\\d{0,6}|90\\.0{0,6}|[0-8]?\\d{1}|90)$/; 社会属性 身份证号 第一代身份证只有15位数，第二代身份证有18位数，各位按照需求来选择表达式。 第一、二代身份证 var isIdCard = /^(^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$)|(^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d{4})|\\d{3}[Xx])$)$/; 第一代身份证(15位) var isIdCard = /^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$/; 第二代身份证 var isIdCard = /^[1-9]\\d{5}(18|19|20)\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/; 护照 var isIdCard = /^(P\\d{7}|G\\d{7,8}|TH\\d{7,8}|S\\d{7,8}|A\\d{7,8}|L\\d{7,8}|\\d{9}|D\\d+|1[4,5]\\d{7})$/; 统一社会信用代码 标准规定统一社会信用代码用18位阿拉伯数字或大写英文字母表示，分别是1位登记管理部门代码、1位机构类别代码、6位登记管理机关行政区划码、9位主体标识码、1位校验码。 var isOrgCode = /^([0-9ABCDEFGHJKLMNPQRTUWXY]{2})(\\d{6})([0-9ABCDEFGHJKLMNPQRTUWXY]{9})([0-9ABCDEFGHJKLMNPQRTUWXY])$/; 营业执照注册号 var isBusinessRegNo = /(^(?:(?![IOZSV])[\\dA-Z]){2}\\d{6}(?:(?![IOZSV])[\\dA-Z]){10}$)|(^\\d{15}$)/; 不动产单元号 var isCode = /^\\d{12}[GJZ][ABSXCDEFGHWY]\\d{4}[1-9][FLQW]\\d{7}[1-9]$/; 组织机构代码 全国组织机构代码由八位数字（或大写拉丁字母）本体代码和一位数字（或大写拉丁字母）校验码组成。 var isOrgCode = /[A-Za-z0-9]{8}-[A-Za-z0-9]$/; 车牌号码 var isCar = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$/; © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-09-05 11:51:25 "},"docs/chapter1/算法-es6版.html":{"url":"docs/chapter1/算法-es6版.html","title":"算法-es6版","keywords":"","body":"算法(es6) js 统计一个字符串出现频率最高的字母/数字 let str = 'asdfghjklaqwertyuiopiaia'; const strChar = str => { let string = [...str], maxValue = '', obj = {}, max = 0; string.forEach(value => { obj[value] = obj[value] == undefined ? 1 : obj[value] + 1 if (obj[value] > max) { max = obj[value] maxValue = value } }) return maxValue; } console.log(strChar(str)) // a 数组去重 forEach let arr = ['1', '2', '3', '1', 'a', 'b', 'b'] const unique = arr => { let obj = {} arr.forEach(value => { obj[value] = 0 }) return Object.keys(obj) } console.log(unique(arr)) // ['1','2','3','a','b'] filter let arr = ['1', '2', '3', '1', 'a', 'b', 'b'] const unique = arr => { return arr.filter((ele, index, array) => { return index === array.indexOf(ele) }) } console.log(unique(arr)) // ['1','2','3','a','b'] set let arr = ['1', '2', '3', '1', 'a', 'b', 'b'] const unique = arr => { return [...new Set(arr)] } console.log(unique(arr)) // ['1','2','3','a','b'] 翻转字符串 let str =\"Hello Dog\"; const reverseString = str =>{ return [...str].reverse().join(\"\"); } console.log(reverseString(str)) // goD olleH 数组中最大差值 forEach let arr = [23, 4, 5, 2, 4, 5, 6, 6, 71, -3]; const difference = arr => { let min = arr[0], max = 0; arr.forEach(value => { if (value max) max = value }) return max - min ; } console.log(difference(arr)) // 74 max、min let arr = [23, 4, 5, 2, 4, 5, 6, 6, 71, -3]; const difference = arr => { let max = Math.max(...arr), min = Math.min(...arr); return max - min ; } console.log(difference(arr)) // 74 不借助临时变量，进行两个整数的交换 数组解构 let a = 2, b = 3; [b,a] = [a,b] console.log(a,b) // 3 2 算术运算（加减） 输入a = 2,b = 3,输出 a = 3,b = 2 let a = 2, b = 3; const swop = (a, b) => { b = b - a; a = a + b; b = a - b; return [a,b]; } console.log(swop(2,3)) // [3,2] 逻辑运算（异或） let a = 2, b = 3; const swop = (a, b) => { a ^= b; //x先存x和y两者的信息 b ^= a; //保持x不变，利用x异或反转y的原始值使其等于x的原始值 a ^= b; //保持y不变，利用x异或反转y的原始值使其等于y的原始值 return [a,b]; } console.log(swop(2,3)) // [3,2] 排序 (从小到大) 冒泡排序let arr = [43, 32, 1, 5, 9, 22]; const sort = arr => { let res = [] arr.forEach((v, i) => { for (let j = i + 1; j arr[j]) { [arr[i],arr[j]] = [arr[j],arr[i]] } } }) return arr } console.log(sort(arr)) // [1, 5, 9, 22, 32, 43] 比较两个数组的内容是否相同 // Warn if overriding existing method if (Array.prototype.equals) console.warn( \"Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.\"); // attach the .equals method to Array's prototype to call it on any array Array.prototype.equals = function (array) { // if the other array is a falsy value, return if (!array) return false; // compare lengths - can save a lot of time if (this.length != array.length) return false; for (var i = 0, l = this.length; i 比较Object Object.prototype.equals = function (object2) { //For the first loop, we only check for types for (propName in this) { //Check for inherited methods and properties - like .equals itself //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty //Return false if the return value is different if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) { return false; } //Check instance type else if (typeof this[propName] != typeof object2[propName]) { //Different types => not equal return false; } } //Now a deeper check using other objects property names for (propName in object2) { //We must check instances anyway, there may be a property that only exists in object2 //I wonder, if remembering the checked values from the first loop would be faster or not if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) { return false; } else if (typeof this[propName] != typeof object2[propName]) { return false; } //If the property is inherited, do not check any more (it must be equa if both objects inherit it) if (!this.hasOwnProperty(propName)) continue; //Now the detail check and recursion //This returns the script back to the array comparing /**REQUIRES Array.equals**/ if (this[propName] instanceof Array && object2[propName] instanceof Array) { // recurse into the nested arrays if (!this[propName].equals(object2[propName])) return false; } else if (this[propName] instanceof Object && object2[propName] instanceof Object) { // recurse into another objects //console.log(\"Recursing to compare \", this[propName],\"with\",object2[propName], \" both named \\\"\"+propName+\"\\\"\"); if (!this[propName].equals(object2[propName])) return false; } //Normal value comparison for strings and numbers else if (this[propName] != object2[propName]) { return false; } } //If everything passed, let's say YES return true; } 随机数生成 min ≤ r ≤ max function RandomNumBoth(Min,Max){ var Range = Max - Min; var Rand = Math.random(); var num = Min + Math.round(Rand * Range); //四舍五入 return num; } min ≤ r function RandomNum(Min, Max) { var Range = Max - Min; var Rand = Math.random(); var num = Min + Math.floor(Rand * Range); //舍去 return num; } min function RandomNum(Min, Max) { var Range = Max - Min; var Rand = Math.random(); if(Math.round(Rand * Range)==0){ return Min + 1; } var num = Min + Math.round(Rand * Range); return num; } min function RandomNum(Min, Max) { var Range = Max - Min; var Rand = Math.random(); if(Math.round(Rand * Range)==0){ return Min + 1; }else if(Math.round(Rand * Max)==Max) { index++; return Max - 1; }else{ var num = Min + Math.round(Rand * Range) - 1; return num; } } 从数组中随机取出一项 function getFromArr(){ var prefixArray = [\"134\", \"135\", \"136\", \"137\", \"138\"]; var i = parseInt(prefixArray.length * Math.random()); var prefix = prefixArray[i]; for (var j = 0; j © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:54 "},"docs/chapter2/":{"url":"docs/chapter2/","title":"HTML与CSS","keywords":"","body":"HTML与CSS 此部分主要是HTML与CSS相关的代码，包括一些常用的组件的样式 © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:54 "},"docs/chapter2/meta详解.html":{"url":"docs/chapter2/meta详解.html","title":"meta详解","keywords":"","body":"meta详解 meta标签作用 META标签是HTML标记HEAD区的一个关键标签，提供文档字符集、使用语言、作者等基本信息，以及对关键词和网页等级的设定等，最大的作用是能够做搜索引擎优化（SEO）。 PS：便于搜索引擎机器人查找、分类，互联网应用应该要注意。 meta标签可分为两大部分：http-equiv和name变量。 http-equiv http-equiv相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助浏览器正确地显示网页内容。 值 描述 例子 content-type 设定页面使用的字符集 GB2312时，代表说明网站是采用的编码是简体中文； ISO-8859-1时，代表说明网站是采用的编码是英文； UTF-8时，代表世界通用的语言编码； PS：html5页面的做法是直接使用 X-UA-Compatible IE8的专用标记，用来指定IE8浏览器去模拟某个特定版本的IE浏览器的渲染方式，以此来解决部分兼容问题。 以上代码告诉IE浏览器，无论是否用DTD声明文档标准，IE8/9都会以IE7引擎来渲染页面。 以上代码告诉IE浏览器，IE8/9都会以IE8引擎来渲染页面。 以上代码告诉IE浏览器，IE8/9及以后的版本都会以最高版本IE来渲染页面。 以上代码IE=edge告诉IE使用最新的引擎渲染网页，chrome=1则可以激活Chrome Frame. PS：谷歌添加一个插件：Google Chrome Frame（谷歌内嵌浏览器框架GCF），这个插件可以让用户的IE浏览器外不变，但用户在浏览网页时，实际上使用的是Google Chrome浏览器内核，而且支持IE6、7、8等多个版本的IE浏览器。 expires 设定网页的过期时间。 PS：必须使用GMT的时间格式 refresh 自动刷新并指向新页面。 PS：2代表页面停留2秒后跳转到后面的网址上 set-cookie 如果网页过期，那么自动删除本地cookie。 PS：必须使用GMT的时间格式。 windows-target 强制页面在当前窗口中以独立页面显示，可以防止自己的网页被别人当作一个frame页调用 cache-control 缓存机制 Public 指示响应可被任何缓存区缓存。 Private 指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。 no-cache 指示请求或响应消息不能缓存。 no-store 用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。 max-age 指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。 min-fresh 指示客户机可以接收响应时间小于当前时间加上指定时间的响应。 max-stale 指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。 name name属性主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。 值 描述 例子 author 标注网页的作者 keywords 页面关键词，用于被搜索引擎收录 description 页面描述，用于搜索引擎收录 viewport 用于控制页面缩放 详情可查看：http://www.cnblogs.com/lovesong/p/4355029.html renderer 指定双核浏览器默认以何种方式渲染页面。 //默认webkit内核 //默认IE兼容模式 //默认IE标准模式 PS：360浏览器支持 generator 说明网站的采用的什么软件制作 revised 网页文档的修改时间 robots 用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引。 取值：all|none|index|noindex|follow|nofollow, 默认allall：文件将被检索，且页面上的链接可以被查询； none：文件将不被检索，且页面上的链接不可以被查询； index：文件将被检索； follow：页面上的链接可以被查询； noindex：文件将不被检索，但页面上的链接可以被查询； nofollow：文件将不被检索，页面上的链接可以被查询。 copyright 网站版权信息 © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:54 "},"docs/chapter2/CSS样式.html":{"url":"docs/chapter2/CSS样式.html","title":"CSS样式","keywords":"","body":"css封装 表单 input placeholder ::-webkit-input-placeholder { /* WebKit browsers */ color: #999; } :-moz-placeholder { /* Mozilla Firefox 4 to 18 */ color: #999; } ::-moz-placeholder { /* Mozilla Firefox 19+ */ color: #999; } :-ms-input-placeholder { /* Internet Explorer 10+ */ color: #999; } 文本溢出显示省略号 单行文本 p { overflow: hidden; text-overflow:ellipsis; white-space: nowrap; } 注意事项：如果实现单行文本的溢出显示省略号同学们应该都知道用text-overflow:ellipsis属性来，当然还需要加宽度width属来兼容部分浏览。 多行文本 第1种情况 适用范围：因使用了WebKit的CSS扩展属性，该方法适用于WebKit浏览器及移动端； p { display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 3; overflow: hidden; } 注意事项： 1. -webkit-line-clamp用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性。常见结合属性： 2. display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。 3. -webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。 第2种情况 适用范围：该方法适用范围广，但文字未超出行的情况下也会出现省略号,可结合js优化该方法。 p { position: relative; line-height: 20px; max-height: 40px; overflow: hidden; } p::after { content: \"...\"; position: absolute; bottom: 0; right: 0; padding-left: 40px; background: -webkit-linear-gradient(left, transparent, #fff 55%); background: -o-linear-gradient(right, transparent, #fff 55%); background: -moz-linear-gradient(right, transparent, #fff 55%); background: linear-gradient(to right, transparent, #fff 55%); } 注意事项： 1. 将height设置为line-height的整数倍，防止超出的文字露出。 2. 给p::after添加渐变背景可避免文字只显示一半。 3. 由于ie6-7不显示content内容，所以要添加标签兼容ie6-7（如：…）；兼容ie8需要将::after替换成:after。 兼容性 ie8兼容rgba(RR,GG,BB,AA) ie8以上：rgba(RR,GG,BB,AA); ie8：filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#AARRGGBB,endColorstr=#AARRGGBB); “#AARRGGBB”是颜色的意思，是由两部分组成的。 第一部是透明度值：#AA 。是rgba透明度0.1的IEfilter值。从0.1到0.9每个数字对应一个IEfilter值。对应关系如下： |rgba透明值| IEfilter值| |-|-| |0.1|19| |0.2|33| |0.3|4c| |0.4|66| |0.5|7f| |0.6|99| |0.7|b2| |0.8|c8| |0.9|e5| vue 隐藏显示的{{}} /*vue*/ [v-cloak] { display: none !important; } 时间轴 时间轴 演示地址：https://musez.github.io/web-dev-tools/pages/timeline.htm html 2018-01-01 00:00:00 武汉佳软信息技术有限公司（以下简称”佳软信息”）成立于2007年，是一家电子政务整体解决方案提供商，位于武汉东湖新技术开发区——“中国光谷”中心的光谷软件园。经过多年的发展，公司的业务范围扩展至政府门户网站建设、行政审批信息化、政府信息资源整合、政府行业管理系统的研发服务，涉及统一门户、统一用户、网站内容管理平台、全文检索、信息资源库、信息资源目录及信息交流平台等，不断为政务服务和民生服务提供优质产品。目前拥有湖北省交通运输厅、省财政厅、省国土资源厅、省公安厅、省质监局、省监察厅等40余家省直部门用户。 2018-01-01 00:00:00 武汉佳软信息技术有限公司（以下简称”佳软信息”） 2018-01-01 00:00:00 武汉佳软信息技术有限公司（以下简称”佳软信息”） scss .timeline { list-style-type: none; padding: 0px; border-left: 2px solid #ccc; margin: 10px 10px 10px 20px; @at-root .timeline_cell { position: relative; margin-top: 15px; padding-left: 20px; b:before { content: ''; position: absolute; left: -10px; width: 18px; height: 18px; border-radius: 9px; background: #ccc; } &.active b:before { background: #359; } .timeline_cell-time, .timeline_cell-desc { display: block; color: #000; a { color: #359; text-decoration: none; } } &.active .timeline_cell-time { color: #359; font-weight: bolder; } } } css .timeline { list-style-type: none; padding: 0px; border-left: 2px solid #ccc; margin: 10px 10px 10px 20px; } .timeline_cell { position: relative; margin-top: 15px; padding-left: 20px; } .timeline_cell b:before { content: ''; position: absolute; left: -10px; width: 18px; height: 18px; border-radius: 9px; background: #ccc; } .timeline_cell.active b:before { background: #359; } .timeline_cell .timeline_cell-time, .timeline_cell .timeline_cell-desc { display: block; color: #000; } .timeline_cell .timeline_cell-time a, .timeline_cell .timeline_cell-desc a { color: #359; text-decoration: none; } .timeline_cell.active .timeline_cell-time { color: #359; font-weight: bolder; } © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:54 "},"docs/chapter2/CSS3动画.html":{"url":"docs/chapter2/CSS3动画.html","title":"CSS3动画","keywords":"","body":"CSS3 常用动画 {{each list}} {{$value.name}} {{/each}} CSS3 常用四个动画（旋转、放大、旋转放大、移动） 效果一：360°旋转 修改rotate(旋转度数) * { transition:All 0.4s ease-in-out; -webkit-transition:All 0.4s ease-in-out; -moz-transition:All 0.4s ease-in-out; -o-transition:All 0.4s ease-in-out; } *:hover { transform:rotate(360deg); -webkit-transform:rotate(360deg); -moz-transform:rotate(360deg); -o-transform:rotate(360deg); -ms-transform:rotate(360deg); } 效果二：放大 修改scale(放大的值) * { transition:All 0.4s ease-in-out; -webkit-transition:All 0.4s ease-in-out; -moz-transition:All 0.4s ease-in-out; -o-transition:All 0.4s ease-in-out; } *:hover { transform:scale(1.2); -webkit-transform:scale(1.2); -moz-transform:scale(1.2); -o-transform:scale(1.2); -ms-transform:scale(1.2); } 效果三：旋转放大 修改rotate(旋转度数) scale(放大值) * { transition:All 0.4s ease-in-out; -webkit-transition:All 0.4s ease-in-out; -moz-transition:All 0.4s ease-in-out; -o-transition:All 0.4s ease-in-out; } *:hover { transform:rotate(360deg) scale(1.2); -webkit-transform:rotate(360deg) scale(1.2); -moz-transform:rotate(360deg) scale(1.2); -o-transform:rotate(360deg) scale(1.2); -ms-transform:rotate(360deg) scale(1.2); } 效果四：上下左右移动 修改translate(x轴,y轴) * { transition:All 0.4s ease-in-out; -webkit-transition:All 0.4s ease-in-out; -moz-transition:All 0.4s ease-in-out; -o-transition:All 0.4s ease-in-out; } *:hover { transform:translate(0,-10px); -webkit-transform:translate(0,-10px); -moz-transform:translate(0,-10px); -o-transform:translate(0,-10px); -ms-transform:translate(0,-10px); } SCSS改造 // 执行动画以及执行时间设定 @mixin dz($time:0.25s){ -webkit-transition: all $time ease-in-out; -moz-transition: all $time ease-in-out; -o-transition: all $time ease-in-out; -ms-transition: all $time ease-in-out; transition: all $time ease-in-out; } // 宣传动画调用 @mixin xz($deg:360){ transform:rotate($deg+deg); -webkit-transform:rotate($deg+deg); -moz-transform:rotate($deg+deg); -o-transform:rotate($deg+deg); -ms-transform:rotate($deg+deg); } // 放大动画 @minxin fd($s1:1.2){ transform:scale($s1); -webkit-transform:scale($s1); -moz-transform:scale($s1); -o-transform:scale($s1); -ms-transform:scale($s1); } // 旋转放大动画 @mixin xzfd($deg:360,$s1:1.2){ transform:rotate($deg+deg) scale($s1); -webkit-transform:rotate($deg+deg) scale($s1); -moz-transform:rotate($deg+deg) scale($s1); -o-transform:rotate($deg+deg) scale($s1); -ms-transform:rotate($deg+deg) scale($s1); } // 移动动画 @mixin yd($s1:0,$s2:0){ transform:translate($s1,$s2); -webkit-transform:translate($s1,$s2); -moz-transform:translate($s1,$s2); -o-transform:translate($s1,$s2); -ms-transform:translate($s1,$s2); } 使用方法 #somebox{ @include dz(); &:hover { @include yd(-10px,-10px); } } © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-08-22 17:36:00 "},"docs/chapter2/CSS设置居中的方案.html":{"url":"docs/chapter2/CSS设置居中的方案.html","title":"CSS设置居中的方案","keywords":"","body":"CSS设置居中的方案 块级元素居中 html代码部分 child 行内元素居中 html代码部分 child 水平居中 行内元素 text-align: center; .parent { text-align: center; } 块级元素 margin: auto; （低版本浏览器还需要设置 text-align: center;） .parent { text-align: center; } .child { margin: auto; } 垂直居中 行内元素（单行文字垂直居中） .parent { height: 200px; line-height: 200px; } 块级元素：绝对定位（需要提前知道尺寸） 优点：兼容性不错 缺点：需要提前知道尺寸 .parent { position: relative; height: 200px; } .child { width: 80px; height: 40px; background: blue; position: absolute; left: 50%; top: 50%; margin-top: -20px; margin-left: -40px; } © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:54 "},"docs/chapter4/":{"url":"docs/chapter4/","title":"开发工具","keywords":"","body":"开发工具 © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:54 "},"docs/chapter4/Node.js安装及环境配置之Windows篇.html":{"url":"docs/chapter4/Node.js安装及环境配置之Windows篇.html","title":"Node.js安装及环境配置之Windows篇","keywords":"","body":"Node.js安装及环境配置之Windows篇 Node.js安装及环境配置之Windows篇 一、安装环境 本机系统：Windows 10（64位） 二、安装Node.js步骤 下载对应你系统的Node.js版本:https://nodejs.org/en/download/ 选安装目录进行安装 环境配置 测试 三、前期准备 Node.js简介 简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。 下载Node.js 打开官网下载链接:https://nodejs.org/en/download/ 我这里下载的是node-v6.9.2-x64.msi,如下图： 四、开始安装 下载完成后，双击“node-v6.9.2-x64.msi”，开始安装Node.js 点击【Next】按钮 勾选复选框，点击【Next】按钮 修改好目录后，点击【Next】按钮 安装完后点击【Finish】按钮完成安装 至此Node.js已经安装完成，可以先进行下简单的测试安装是否成功了，后面还要进行环境配置 在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口 安装完后的目录如下图所示： 此处说明下：新版的Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西 五、环境配置 说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\\Users\\用户名\\AppData\\Roaming\\npm】路径中，占C盘空间。 例如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【D:\\Develop\\nodejs】下创建两个文件夹【node_global】及【node_cache】如下图： 创建完两个空文件夹之后，打开cmd命令窗口，输入 npm config set prefix \"D:\\Develop\\nodejs\\node_global\" npm config set cache \"D:\\Develop\\nodejs\\node_cache\" 进入环境变量对话框，在【系统变量】下新建【NODE_PATH】，输入【D:\\Develop\\nodejs\\node_global\\node_modules】，将【用户变量】下的【Path】修改为【D:\\Develop\\nodejs\\node_global】 接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量” 六、测试 配置完后，安装个module测试下，我们就安装最常用的express模块，打开cmd窗口， 输入如下命令进行模块的全局安装： npm install express -g # -g是全局安装的意思 © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:54 "},"docs/chapter4/开发者工具.html":{"url":"docs/chapter4/开发者工具.html","title":"开发者工具","keywords":"","body":"开发者工具 © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:54 "},"docs/chapter5/":{"url":"docs/chapter5/","title":"markdown语法","keywords":"","body":"markdown的常用语法 简介 Markdown 是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。同时，Markdown支持嵌入html标签。 注意：Markdown使用#、+、*等符号来标记， 符号后面必须跟上 至少1个 空格才有效！ markdown的常用语法 标题 Markdown 标题支持两种形式： 用#标记在标题开头加上1~6个#，依次代表一级标题、二级标题....六级标题 用=和-标记在标题底下加上任意个=代表一级标题，-代表二级标题 列表 有序列表 数字不能省略但可无序，点号之后的空格不能少。建立多级列表时，每个子级别都要比上个级别前面多打2个以上空格。 1. Item-1 1.1. Item-1-1 1.1.1. Item-1-1-1 1.1.1.1. Item-1-1-1-1 1.2. Item-1-2 2. Item-2 3. Item-3 Item-1 1.1. Item-1-1 1.1.1. Item-1-1-1 1.1.1.1. Item-1-1-1-1 1.2. Item-1-2 Item-2 Item-3 无序列表 符号之后的空格不能少，-、+、*效果一样，在嵌套列表中可以循环使用。 - Item-1 - Item-1-1 + Item-1-1-1 * Item-1-1-1-1 * Item-1-2 + Item-2 * Item-3 Item-1 Item-1-1 Item-1-1-1 Item-1-1-1-1 Item-1-2 Item-2 Item-3 注：列表项里面可能包含多个段落，后面的段落必须用4个空格或1个制表符缩进。 - Item-1 - Item-1-1 Item-1-1 (continued...) Item-1-1 (continued...) - Item-1-2 - Item-2 Item-1 Item-1-1 Item-1-1 (continued...) Item-1-1 (continued...) Item-1-2 Item-2 注释 [comment]: <> (这里是注释) [//]: <> (这里是注释) [//]: # (这里是注释) [^_^]: 这里是注释 © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:54 "},"docs/":{"url":"docs/","title":"版本记录","keywords":"","body":"版本记录 A 新增 U 更新 F 修复 2018-05-03 更新日志 A 新增 版本记录 2018-05-07 更新日志 A 新增 添加一些常见的正则表达式 © WangYue 2018 all right reserved，powered by Gitbook修订时间： 2018-07-25 12:15:54 "}}